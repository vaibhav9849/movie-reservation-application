@startuml relationships

package Model {
    class Movie <<entity>> {
        - title : String
        - isPresale : boolean
        - showings : ArrayList<Showing>
        + addShowing(st : Showing)
    }

    class Theatre <<entity>> {
        - name : String
        - address : String
        - showings : ArrayList<Showing>
        + addShowing(st : Showing)
    }

    class Showing <<entity>> {
        - time : String
        - movie : Movie
        - theatre : Theatre
        - seat : ArrayList<Seats>
        - ticket : ArrayList<Ticket>
    }

    class Seat <<entity>> {
        - number : int
        - ticket : Ticket
    }

    class Ticket <<entity>> {
        - id : int
        - seat : Seat
        - payment: Payment
        - isCredited : boolean
    }

    class RegisteredUser <<entity>> {
        - emailAddress : String
        - password : String
        - creditCard : String
        - firstName : String
        - lastName : String
        - address : String
        - annualFeeExpiryDate : String
        - tickets : ArrayList<Ticket>
        + addTicket(t : Ticket)
    }

    class Payment <<entity>> {
        - payment_id: int
        - completion_date: String
        - credit_card: int
        - billed_cost: int
        - refund_amount: int
        - refund_ticket: Refund
        + makePayment(payment: Payment): String
    }

    class Refund <<entity>> {
        - ticket: Ticket
        - expiration_date: int
        - credit_available: int
        + useCreditAsRefund(Refund: refund): Refund
    }

    class DatabaseConnection <<boundary>> {
        - instance : DatabaseConnection
        - connection :  mysqlConnection
        + getInstance()
        + getConnection()
        + query()
    }
}

package View-React {
    class RegisterViewController <<boundary>> {

    }
    class LoginViewController <<boundary>> {

    }
    class ProfileViewController <<boundary>> {

    }
    class TicketBuyingViewController <<boundary>> {

    }
    class MovieViewController <<boundary>> {

    }
    class TheatreViewController <<boundary>> {

    }
    class ShowingViewController <<boundary>> {

    }
    class SeatViewController <<boundary>> {

    }
    class PaymentViewController <<boundary>> {

    }
    class ReceiptViewController <<boundary>> {

    }

    class MovieAPIContextController <<boundary>> {
        - getters()
        - setters()
    }
}

package Server-Express {
    class ServerRoutes <<boundary>> {}

    package Control_Layer {
        class userController <<control>> {
            + login(user: User): User
            + updateUser(user: User)
            + createUser(user: User)
        }
        class seatController <<control>> {}     
        class showingController <<control>> {}
        class movieController <<control>> {}
        class theatreController <<control>> {}
        class refundController <<control>> {}
        class paymentController <<control>> {}
        class ticketController <<control>> {
            + createTicket(ticket: Ticket): Ticket
            + cancelTicket(ticket: Ticket)
        }
    }

    package Service_Layer{
        class emailService <<boundary>> {
            + sendTicketReceiptService(ticket: Ticket): String
            + sendMovieNewsService(news String)
            + sendTicketReceipt(ticket: Ticket): String
            + sendMovieNewsAllUsers(news String)
            + sendWelcomeEmail()
        }
        class userService <<control>> {}
        class seatService <<control>> {}
        class showingService <<control>> {}
        class movieService <<control>> {}
        class theatreService <<control>> {}
        class presaleService <<control>> {
            + isPresaleRestricted(showing: Showing): boolean
        }
        class refundService <<control>> {
            + makeNewRefund(refund: Refund)
        }
        class paymentService <<control>> {
            + payRegistration(payment: Payment)
        }
        interface userPaymentInterface <<interface>> {
            + pay(payment: Payment)
            + payMembership(payment: Payment)
        }
        class userPaymentService <<control>> {
            + pay(payment: Payment)
            + payMembership(payment: Payment)
        }
        class regUserPaymentService <<control>> {
            + pay(payment: Payment)
            + payMembership(payment: Payment)
        }
        class ticketService <<control>> {}
    }
}

package MySQL <<Database>> {
  class Database
}

' start Relationships between server routes
ServerRoutes -->  movieController
ServerRoutes --> userController
ServerRoutes --> seatController
ServerRoutes --> showingController
ServerRoutes --> theatreController
ServerRoutes --> ticketController
ServerRoutes --> paymentController
ServerRoutes --> refundController
' end Relationships between server routes

' start Relationships betweens client views
TicketBuyingViewController *-- MovieViewController
TicketBuyingViewController *-- TheatreViewController
TicketBuyingViewController *-- ShowingViewController
TicketBuyingViewController *-- SeatViewController
TicketBuyingViewController *-- PaymentViewController
TicketBuyingViewController *-- ReceiptViewController

RegisterViewController --> MovieAPIContextController
LoginViewController --> MovieAPIContextController
ProfileViewController --> MovieAPIContextController
TicketBuyingViewController --> MovieAPIContextController
MovieViewController --> MovieAPIContextController
TheatreViewController --> MovieAPIContextController
ShowingViewController --> MovieAPIContextController
SeatViewController --> MovieAPIContextController
PaymentViewController --> MovieAPIContextController
ReceiptViewController --> MovieAPIContextController
' end Relationships betweens client views

' start Relationships betweens controllers/services/models
userController --> userService

userService --> emailService

movieController --> movieService

movieService --> showingService

theatreController --> theatreService

theatreService --> showingService

seatController --> seatService

seatService --> presaleService


showingController --> showingService

showingService --> seatService

refundController --> refundService


ticketController --> ticketService

ticketService --> seatService
ticketService --> paymentService
ticketService --> refundService
ticketService --> emailService

paymentController --> userPaymentInterface

userPaymentInterface --> refundService
userPaymentInterface --> paymentService
userPaymentInterface --> seatService
userPaymentService ..|> userPaymentInterface
regUserPaymentService ..|> userPaymentInterface

paymentService --> userService
' --end Relationships betweens controllers/services

userService --> RegisteredUser
movieService --> Movie
theatreService --> Theatre
seatService --> Seat
presaleService --> Seat
showingService --> Showing
refundService --> Refund
ticketService --> Ticket
userPaymentInterface --> Payment
paymentService --> Payment

MovieAPIContextController -- ServerRoutes : HTTP API communication

' -- start Model relastionships
Movie "1" -- "*" Showing
Theatre "1" -- "*" Showing
Showing "1" --- "*" Seat
Ticket "1" o-- "1" Seat
Ticket "1" o-- "1" Payment
Refund "1" o-- "1" Ticket
RegisteredUser "1" --- "*" Ticket
Payment "1" --> "*" Refund

' -- end Model relastionships

Movie --> DatabaseConnection
Theatre --> DatabaseConnection
Showing --> DatabaseConnection
Seat --> DatabaseConnection
Ticket --> DatabaseConnection
Refund --> DatabaseConnection
RegisteredUser --> DatabaseConnection
Payment --> DatabaseConnection
DatabaseConnection *-- "1" DatabaseConnection
DatabaseConnection -- "1" Database



@enduml